- name: "Valid List Parameter Parsing"
  description: "Test that a valid list parameter is correctly parsed"
  parameterLayers:
    - name: "testLayer"
      definitions:
        - name: "colors"
          type: "stringList"
          required: true
  parsedLayers: []
  queryParameters:
    - name: "colors[]"
      value: "red"
    - name: "colors[]"
      value: "green"
    - name: "colors[]"
      value: "blue"
  expectedLayers:
    - name: "testLayer"
      values:
        colors: ["red", "green", "blue"]
  expectedError: false

- name: "Invalid List Parameter Parsing"
  description: "Test that an invalid list parameter value results in an appropriate error."
  parameterLayers:
    - name: "testLayer"
      definitions:
        - name: "numbers"
          type: "intList"
          required: true
  parsedLayers: []
  queryParameters:
    - name: "numbers[]"
      value: "one"
    - name: "numbers[]"
      value: "two"
    - name: "numbers[]"
      value: "three"
  expectedLayers: []
  expectedError: true

- name: "Missing Required List Parameter"
  description: "Test that a missing required list parameter results in an error."
  parameterLayers:
    - name: "testLayer"
      definitions:
        - name: "ids"
          type: "intList"
          required: true
  parsedLayers: []
  expectedLayers: []
  expectedError: true

- name: "Test with non-list parameter marked as list"
  description: "Confirm that an error is returned when a non-list parameter is incorrectly marked as a list."
  parameterLayers:
    - name: "layer1"
      definitions:
        - name: "nonListParam"
          type: "string"
          required: true
  parsedLayers: []
  queryParameters:
    - name: "nonListParam[]"
      value: "incorrectListFormat"
  expectedLayers: []
  expectedError: true

- name: "Test with valid non-list parameter "
  description: "Ensure that a valid non-list parameter (e.g., 'param=value') is parsed correctly."
  parameterLayers:
    - name: "layer1"
      definitions:
        - name: "validParam"
          type: "string"
          required: true
  parsedLayers: []
  queryParameters:
    - name: "validParam"
      value: "validValue"
  expectedLayers:
    - name: "layer1"
      values:
        validParam: "validValue"
  expectedError: false

- name: "Test with valid unicode non-list parameter with special characters"
  description: "Ensure that a valid non-list parameter with unicode characters is parsed correctly."
  parameterLayers:
    - name: "layer1"
      definitions:
        - name: "validParam"
          type: "string"
          required: true
  parsedLayers: []
  queryParameters:
    - name: "validParam"
      value: "validValue-üëç"
  expectedLayers:
    - name: "layer1"
      values:
        validParam: "validValue-üëç"
  expectedError: false

- name: "Test with missing required non-list parameter"
  description: "Verify that an error is returned when a required non-list parameter is missing from the query."
  parameterLayers:
    - name: "layer1"
      definitions:
        - name: "requiredParam"
          type: "string"
          required: true
  parsedLayers: []
  expectedLayers: []
  expectedError: true

- name: "Test with invalid non-list parameter value"
  description: "Check that an error is returned when the non-list parameter value is invalid (e.g., wrong data type)."
  parameterLayers:
    - name: "layer1"
      definitions:
        - name: "intParam"
          type: "int"
          required: true
  parsedLayers: []
  queryParameters:
    - name: "intParam"
      value: "notAnInteger"
  expectedLayers: []
  expectedError: true

- name: "Test with valid file parameter in query"
  description: "Ensure that a valid file parameter is parsed correctly from the query."
  parameterLayers:
    - name: "layer1"
      definitions:
        - name: "fileParam"
          type: "stringFromFile"
          required: true
  parsedLayers: []
  queryParameters:
    - name: fileParam
      value: "content of the file"
  expectedLayers:
    - name: "layer1"
      values:
        fileParam: "content of the file"
  expectedError: false

- name: "Test that parameter of type 'file' returns an error (not supported)"
  description: "Ensure that a parameter of type 'file' returns an error (not supported)."
  parameterLayers:
    - name: "layer1"
      definitions:
        - name: "fileParam"
          type: "file"
          required: true
  parsedLayers: []
  queryParameters:
    - name: fileParam
      value: "content of the file"
  expectedLayers: []
  # This is actually sneaky, because we do indeed get an error, but of the wrong type
  expectedError: true
  errorString: file parameters are not supported in query parameters

- name: "Test that parameter of type 'fileList' returns an error (not supported)"
  description: "Ensure that a parameter of type 'fileList' returns an error (not supported)."
  parameterLayers:
    - name: "layer1"
      definitions:
        - name: "fileListParam"
          type: "fileList"
          required: true
  parsedLayers: []
  queryParameters:
    - name: fileListParam
      value: "content of the file"
  expectedLayers: []
  expectedError: true
  errorString: file parameters are not supported in query parameters


- name: "Test with missing required file parameter"
  description: "Verify that an error is returned when a required file parameter is missing from the query."
  parameterLayers:
    - name: "layer1"
      definitions:
        - name: "requiredFileParam"
          type: "stringFromFile"
          required: true
  parsedLayers: []
  expectedLayers: []
  expectedError: true

- name: "Test with stringList from file (newline separated file content)"
  description: "Ensure that a valid stringList parameter is parsed correctly from a file in the query."
  parameterLayers:
    - name: "layer1"
      definitions:
        - name: "stringListParam"
          type: "stringListFromFile"
          required: true
  parsedLayers: []
  queryParameters:
    - name: stringListParam
      value: |
        value1
        value2
        value3
  expectedLayers:
    - name: "layer1"
      values:
        stringListParam: ["value1", "value2", "value3"]
  expectedError: false

- name: "Test with valid object parameter from JSON file"
  description: "Ensure that a valid object parameter is parsed correctly from a file in the query."
  parameterLayers:
    - name: "layer1"
      definitions:
        - name: "objectParam"
          type: "objectFromFile"
          required: true
  parsedLayers: []
  queryParameters:
    - name: objectParam
      value: '{"key": "value"}'
  expectedLayers:
    - name: "layer1"
      values:
        objectParam:
          key: "value"
  expectedError: false

- name: "Test with missing required object parameter from file"
  description: "Verify that an error is returned when a required object parameter is missing from the query."
  parameterLayers:
    - name: "layer1"
      definitions:
        - name: "requiredObjectParam"
          type: "objectFromFile"
          required: true
  parsedLayers: []
  expectedLayers: []
  expectedError: true

- name: "Test with invalid object parameter from file"
  description: "Check that an error is returned when the object parameter value from a file is invalid."
  parameterLayers:
    - name: "layer1"
      definitions:
        - name: "objectParam"
          type: "objectFromFile"
          required: true
  parsedLayers: []
  queryParameters:
      - name: objectParam
        value: "not a valid JSON object"
  expectedLayers: []
  expectedError: true

- name: "Test with unsupported parameter type"
  description: "Confirm that an error is returned when an unsupported parameter type is encountered."
  parameterLayers:
    - name: "layer1"
      definitions:
        - name: "unsupportedParam"
          type: "unsupportedType"
          required: true
  parsedLayers: []
  queryParameters:
    - name: "unsupportedParam"
      value: "someValue"
  expectedLayers: []
  expectedError: true

- name: "Test with multiple parameter layers"
  description: "Ensure that multiple parameter layers are handled correctly and that the parameters from each layer are parsed as expected."
  parameterLayers:
    - name: "layer1"
      definitions:
        - name: "param1"
          type: "string"
          required: true
    - name: "layer2"
      definitions:
        - name: "param2"
          type: "int"
          required: false
  parsedLayers: []
  queryParameters:
    - name: "param1"
      value: "value1"
    - name: "param2"
      value: "42"
  expectedLayers:
    - name: "layer1"
      values:
        param1: "value1"
    - name: "layer2"
      values:
        param2: 42
  expectedError: false

- name: "Test with conflicting parameter definitions across layers"
  description: "Verify how the system behaves when there are conflicting parameter definitions in different layers."
  parameterLayers:
    - name: "layer1"
      definitions:
        - name: "conflictParam"
          type: "string"
          required: true
    - name: "layer2"
      definitions:
        - name: "conflictParam"
          type: "int"
          required: true
  parsedLayers: []
  queryParameters:
    - name: "conflictParam"
      value: "shouldBeStringButIntProvided"
  expectedLayers: []
  expectedError: true

- name: "Test with empty query data"
  description: "Check the behavior when the query data is empty and how it handles optional and required parameters."
  parameterLayers:
    - name: "layer1"
      definitions:
        - name: "optionalParam"
          type: "string"
          required: false
        - name: "requiredParam"
          type: "string"
          required: true
  parsedLayers: []
  expectedLayers: []
  expectedError: true


- name: "Test with file and normal fields"
  description: "Ensure that a valid file parameter is parsed correctly from the query."
  parameterLayers:
    - name: "layer1"
      definitions:
        - name: "fileParam"
          type: "stringFromFile"
          required: true
        - name: "normalParam"
          type: "string"
          required: true
  parsedLayers: []
  queryParameters:
    - name: "normalParam"
      value: "normalValue"
    - name: fileParam
      value: "content of the file"
  expectedLayers:
    - name: "layer1"
      values:
        fileParam: "content of the file"
        normalParam: "normalValue"
  expectedError: false

# TODO(manuel, 2023-12-31) We still need to test the File and FileList types
